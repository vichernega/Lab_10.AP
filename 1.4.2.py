# Чернеги Вікторії   Б19_д/122Б
'''
Сформувати функцію, що визначатиме чи є задане натуральне число простим.
Простим називається число, що більше за 1 та не має інших дільників, окрім 1 та самого
себе).
'''
import time                                     # імпортування бібліотек

def prime_iter(n):                              # фунція для з'ясування чи є числа простим ітераційно
    start = time.time()                         # відлік часу
    flag = True                                 # прапорець, який буде змінювати своє значення в залежності від того чи є у заданого числа n дільники окрім 1 і n
    while n > 2:                                # поки n не дорівнює 1 проводиться знаходження остачі від ділення n на числа в діаразоні [n-1; 2]
        n -= 1                                  # зменшення заданого числа на 1
        if k % n == 0:                          # k = початковому n; якщо остача від ділення дорівнює 0, то n - ще один дільник заданого числа
            flag = False                        # зміна прапорця(оскільки число не просте)

    if flag == True:                            # якщо прапорець не змінився, то виведення, що задане число є простим
        print(f'{k} is a prime number')
    else:                                       # в іншому випадку, виведення, що задане число не є простим
        print(f'{k} is not a prime number')
    print(f'Time: {time.time() - start} seconds')  # час виконання програми
    print('---------------------------------------------------------------------')


def prime_rec(n):                               # фунція для з'ясування чи є числа простим рекурсивно
    if n == 1:                                  # умова для виходу з рекурсії
        return 1
    else:                                       # виклик функції за всіма значеннями в діапазні від n-1 до 2
        prime_rec(n - 1)
        list.append(k%n)                        # додавання до списку остачі від ділення заданого числа на числа зі стеку
    flag = True                                 # прапорець, який буде змінювати своє значення в залежності від того чи є у заданого числа n дільники окрім 1 і n
    for i in list:                              # цикл для проходження по елементам списку з остачами
        if i == 0:                              # зміна прапорця, якщо число не просте
            flag = False
    if flag == True:                            # якщо прапорець не змінився, то виведення, що задане число є простим
        return (f'{k} is a prime number')
    else:                                       # в іншому випадку, виведення, що задане число не є простим
        return (f'{k} is not a prime number')


n = int(input('n = '))                          # введення числа
k = n                                           # копіювання числа в змінну k
list = []                                       # пустий список (для остач в рекурсивному методі)
prime_iter(n)                                   # виклик ітераційної функції
start = time.time()                             # відлік часу для рекурсивної функції
print(prime_rec(n-1))                           # виклик і виведення даних рекурсивної функції; n-1, щоб при знаходженні остачі не ділилось n%n
print(f'Time: {time.time() - start} seconds')   # час виконання програми

'''
На мою думку, для цього завдання краще використовувати ітераційне представлення, оскільки воно в рази швидше, 
не потребує додаткових змінних(в мене це list) і таким чином займає менше пам'яті.
Ще з використанням рекурсії є обмеження(максимальне введене число - 999)
'''