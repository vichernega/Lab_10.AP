# Чернеги Вікторії   Б19_д/122Б
'''
Сформувати функцію для переведення натурального числа з
десяткової системи числення у шістнадцятирічну.
'''
import time                             # імпортування бібліотек

def six_iter(n):                        # функція перекладу числа з 10-ої у 16-у систему числення ітераційно
    start = time.time()                 # відлік часу
    while n > 15:                       # поки число, на яке ділимо більше 15 (оскільки в 16-ій системі 15 символів)
        ost = n % 16                    # знаходимо остачу від ділення числа на 16
        n //= 16                        # знаходимо результат від цілочисельного ділення числа на 16
        list.append(ost)                # додаємо всі остачі до списку
    list.append(n % 16)                 # додаємо останню остачу до списку(вона менше 16, тому не пройшла цикл, але потрібна при перекладі)
    str = ''                            # пустий рядок, до якого буде застосовуватись конкатенація елементів зі словника по ключу
    for i in list:                      # знаходження значення елмента зі списку(ключ) у словнику
        str += dict[i]                  # конкатенація для з'єднання всіх елементів
    print(str[::-1])                    # виведення утвореного рядка із числом у 16-ій системі у зворотньому порядку
    print(f'Time: {time.time() - start} seconds')  # час виконання програми


def six_rec(n):                         # функція перекладу числа з 10-ої у 16-у систему числення рекурсивно
    if n < 16:                          # умова виходу з циклу
        list1.append(n)                 # додавання у список з остачами останнього результату ділення
        return n                        # повертання n

    six_rec(n//16)                      # виклик фукції із параметром n//16
    ost1 = n % 16                       # знаходження остачі від кожного результату цілочисельного ділення
    list1.append(ost1)                  # додавання остачі у список, щоб використовувати як ключ у словнику
    str1 = ''                           # пустий рядок, до якого буде застосовуватись конкатенація елементів зі словника по ключу
    for i in list1:                     # знаходження значення елмента зі списку(ключ) у словнику
        str1 += dict[i]                 # конкатенація для з'єднання всіх елементів
    return str1                         # виведення утвореного рядка із числом у 16-ій системі


n = int(input('n = '))                  # введення числа
list, list1 = [], []                    # пусті списки з остачами
dict = {0: '0', 1: '1', 2: '2', 3: '3',4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9', 10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F'}    # словник з відповідними значеннями у 16-ій системі числення
six_iter(n)                             # виклик ітераційної функції
start = time.time()                             # відлік часу для рекурсивної програми
print(six_rec(n))                               # виклик рекурсивної функції
print(f'Time: {time.time() - start} seconds')   # час виконання рекурсивної програми

'''
На мою думку, якщо програма має справу з невеликим обсягом даних, краще використовувати рекурсію, оскільки вона записує 
всі значення у стек, а з великим обсягом кразе буде справлятисб ітепаційна програма.
'''